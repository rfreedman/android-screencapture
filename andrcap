#!/usr/bin/env groovy

@Grapes(
	@Grab(group='com.google.android.tools', module='ddmlib', version='r10')
)

            
import com.android.ddmlib.AndroidDebugBridge;
import com.android.ddmlib.IDevice;
import com.android.ddmlib.Log;
import com.android.ddmlib.RawImage;
import com.android.ddmlib.Log.ILogOutput;
import com.android.ddmlib.Log.LogLevel;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public static void main(String[] args) {
	if(args.length == 1) {
		capture(args[0])
	} else {
		println "usage - andrcap <filename.png>"
	}
}

public static void capture(String filepath) {
	try{
		//println "initializing bridge"
		AndroidDebugBridge.init(false)

		//println "instantiating bridge"
		AndroidDebugBridge bridge = AndroidDebugBridge.createBridge();

		//println "getting device list"
		int count = 0;
		while (bridge.hasInitialDeviceList() == false) {
		    try {
		        Thread.sleep(100);
		        count++;
		    } catch (InterruptedException e) {
		        // pass
		    }

		    // let's not wait > 10 sec.
		    if (count > 100) {
		        System.err.println("Timeout getting device list!");
		        return;
		    }
		}

		// now get the devices
		IDevice[] devices = bridge.getDevices();
		if(devices == null || devices.size() < 1) {
			println "didn't get device"
			exit(1)
		}

		def device = devices[0]
		//println "got device: ${device}"

		//println "taking screenshot:"
		def landscape = false
		getDeviceImage(device, filepath, landscape);
	
		//println "Done!"

	} finally {
		AndroidDebugBridge.terminate()
	}
}

	private static void getDeviceImage(IDevice device, String filepath, boolean landscape) throws IOException {
       RawImage rawImage;

       try {
           rawImage = device.getScreenshot();
       }
       catch (IOException ioe) {
           println("Unable to get frame buffer: " + ioe.getMessage());
		   return
       }

       // device/adb not available?
       if (rawImage == null)
           return;

       if (landscape) {
           rawImage = rawImage.getRotated();
       }

       // convert raw data to an Image
	   if(!filepath.endsWith('.png')) {
			filepath += '.png'
	   }
	
	   println "capturing ${rawImage.width}x${rawImage.height} image from ${device} to ${filepath}"
  
       BufferedImage image = new BufferedImage(rawImage.width, rawImage.height, BufferedImage.TYPE_INT_ARGB);

       int index = 0;
       int IndexInc = rawImage.bpp >> 3;
       for (int y = 0 ; y < rawImage.height ; y++) {
           for (int x = 0 ; x < rawImage.width ; x++) {
               int value = rawImage.getARGB(index);
               index += IndexInc;
               image.setRGB(x, y, value);
           }
       }

       if (!ImageIO.write(image, "png", new File(filepath))) {
           throw new IOException("Failed to find png writer");
       }
	}

